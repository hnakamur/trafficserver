#
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-19 07:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../arch/hacking/config-var-impl.en.rst:56
msgid "Configuration Variable Implementation"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:58
msgid ""
"Adding a new configuration variable in :file:`records.config` requires a "
"number of steps which are mostly documented here."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:66
msgid "Defining the Variable"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:100
msgid "type:``RecT``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:76
msgid "``RECT_NULL``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:76
msgid "Undefined record."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:79
msgid "``RECT_CONFIG``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:79
msgid "General configuration variable."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:82
msgid "``RECT_PROCESS``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:82
msgid "Process related statistic."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:85
msgid "``RECT_NODE``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:85
msgid "Local statistic."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:88
msgid "``RECT_CLUSTER``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:88
msgid "Cluster statistic."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:91
msgid "``RECT_LOCAL``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:91
msgid "Configuration variable that is explicitly not shared across a cluster."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:94
msgid "``RECT_PLUGIN``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:94
msgid "Plugin created statistic."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:106
msgid "name:``char const*``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:110
msgid "value_type:``RecDataT``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:109
msgid ""
"The data type of the value. It should be one of ``RECD_INT``, "
"``RECD_STRING``, ``RECD_FLOAT`` as appropriate."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:114
msgid "default:``char const*``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:113
msgid ""
"The default value for the variable. This is always a string regardless of "
"the *value_type*."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:120
msgid "update:``RecUpdateT``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:120
msgid "``RECU_NULL``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:120
msgid "Behavior is unknown or unspecified."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:125
msgid "``RECU_DYNAMIC``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:125
msgid "This can be updated via command line tools."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:128
msgid "``RECD_RESTART_TS``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:128
msgid ""
"The :ref:`traffic_server` process must be restarted for a new value to take "
"effect."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:131
msgid "``RECD_RESTART_TM``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:131
msgid ""
"The :ref:`traffic_manager` process must be restarted for a new value to "
"take effect."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:134
msgid "``RECD_RESTART_TC``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:134
msgid ""
"The :ref:`traffic_cop` process must be restarted for a new value to take "
"effect."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:140
msgid "required:``RecordRequiredType``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:137
msgid ""
"Effectively a boolean that specifies if the record is required to be "
"present, with ``RR_NULL`` meaning not required and ``RR_REQUIRED`` "
"indicating that it is required. Given that using ``RR_REQUIRED`` would be a "
"major incompatibility, ``RR_NULL`` is generally the better choice."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:156
msgid "check:``RecCheckT``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:147
msgid "``RECC_NULL``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:147
msgid "No additional checking."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:150
msgid "``RECC_STR``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:150
msgid "Verify the value is a string."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:153
msgid "``RECC_INT``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:153
msgid "Verify the value is an integer."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:156
msgid "``RECC_IP``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:156
msgid "Verify the value is an IP address. Unknown if this checks for IPv6."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:163
msgid "pattern:``char const*``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:176
msgid "access:``RecAccessT``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:169
msgid "``RECA_NULL``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:169
msgid "The value is read / write."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:172
msgid "``RECA_READ_ONLY``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:172
msgid "The value is read only."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:176
msgid "``RECA_NO_ACCESS``"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:179
msgid "Variable Infrastructure"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:181
msgid ""
"The primary effort in defining a configuration variable is handling "
"updates, generally via :option:`traffic_line -x`. This is handled in a "
"generic way, as described in the next section, or in a :ref:`more "
"specialized way <http-config-var-impl>` (built on top of the generic "
"mechanism) for HTTP related configuration variables. This is only needed if "
"the variable is marked as dynamically updateable (|RECU_DYNAMIC|_) although "
"HTTP configuration variables should be dynamic if possible."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:190
msgid "Documentation and Defaults"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:205
msgid "reloadable"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:205
msgid ""
"The variable can be reloaded via command line on a running Traffic Server."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:208
msgid "metric"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:208
msgid ""
"Specify the units for the value. This is critical for variables that use "
"unexpected or non-obvious metrics, such as minutes instead of seconds, or "
"disk sectors instead of bytes."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:211
msgid "deprecated"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:211
msgid "Mark a variable as deprecated."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:0
msgid "Example"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:220
msgid ""
"If you need to refer to another configuration variable in the "
"documentation, you can use the form ::"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:235
msgid "Handling Updates"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:237
msgid ""
"The simplest mechanism for handling updates is the "
"``REC_EstablishStaticConfigXXX`` family of functions. This mechanism will "
"cause the value in the indicated instance to be updated in place when an "
"update to :file:`records.config` occurs. This is done asynchronously using "
"atomic operations. Use of these variables must keep that in mind."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:243
msgid ""
"If a variable requires additional handling when updated a callback can be "
"registered which is called when the variable is updated. This is what the "
"``REC_EstablishStaticConfigXXX`` calls do internally with a callback that "
"simply reads the new value and writes it to storage indicated by the call "
"parameters. The functions used are the ``link_XXX`` static functions in |"
"RecCore.cc|_."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:253
msgid "``char const*`` *name*"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:253
msgid "The variable name."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:260
msgid "*callback*"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:264
msgid "``void*`` *cookie*"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:263
msgid ""
"A value passed to the *callback*. This is only for the callback, the "
"internals simply store it and pass it on."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:272
msgid ""
"The callback occurs asynchronously. For HTTP variables as described in the "
"next section, this is handled by the more specialized HTTP update "
"mechanisms. Otherwise it is the implementor's responsibility to avoid race "
"conditions."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:279
msgid "HTTP Configuation Values"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:309
msgid "Overridable Variables"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:322
msgid ""
"Augment the ``TSHttpTxnConfigFind`` function to return this enumeration "
"value when given the name of the configuration variable. Be sure to count "
"the charaters very carefully."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:326
msgid ""
"Augment the ``_conf_to_memberp`` function in |InkAPI.cc|_ to return a "
"pointer to the appropriate member of ``OverridableHttpConfigParams`` and "
"set the type if not a byte value."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:330
msgid ""
"Update the testing logic in |InkAPITest.cc|_ by adding the string name of "
"the configuration variable to the ``SDK_Overridable_Configs`` array."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:61
msgid ""
"Before adding a new configuration variable, please discuss it on the "
"mailing list. It will commonly be the case that a better name, or a more "
"general approach to the problem which solves several different issues, may "
"be suggested."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:68
msgid ""
"To begin, the new configuration variables must be added to |RecordsConfig."
"cc|_. This contains a long array of configuration variable records. The "
"fields for each record are:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:73
msgid "Type of record. The valid values are:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:96
msgid ""
"In general, ``RECT_CONFIG`` should be used unless it is required that the "
"value not be shared among members of a cluster, in which case "
"``RECT_LOCAL`` should be used. If you use ``RECT_LOCAL``, you must also "
"start the line with ``LOCAL`` instead of ``CONFIG`` and the name should use "
"``.local.`` instead of ``.config.``."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:103
msgid ""
"The fully qualified name of the configuration variable. Although there "
"appears to be a hierarchial naming scheme, that's just a convention, and it "
"is not actually used by the code. Nonetheless, new variables should adhere "
"to the hierarchial scheme."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:117
msgid "Information about how the variable is updated. The valid values are:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:143
msgid ""
"Additional type checking. It is unclear if this is actually implemented. "
"The valid values are:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:161
msgid ""
"This provides a regular expressions (PCRE format) for validating the value, "
"beyond the basic type validation performed by ``RecCheckT``. This can be "
"``NULL`` if there is no regular expression to use."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:166
msgid "Access control. The valid values are:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:175
msgid ""
"No access to the value; only privileged level parts of ATS can access the "
"value."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:192
msgid ""
"A configuration variable should be documented in :file:`records.config`. "
"There are many examples in the file already that can be used for guidance. "
"The general format is to use the tag ::"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:198
msgid ""
"The arguments to this are the same as for the configuration file. The "
"documentation generator will pick out key bits and use them to decorate the "
"entry. In particular if a value is present it will be removed and used as "
"the default value. You can attach some additional options to the variable. "
"These are:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:217
msgid "\\:ts\\:cv\\:\\`custom.variable\\`"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:217
msgid "minutes"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:225
msgid "This will display the name as a link to the full definition."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:227
msgid ""
"In general, a new configuration variable should not be present in the "
"default :file:`records.config`. If it is added, such defaults should be "
"added to the file ``proxy/config/records.config.default.in``. This is used "
"to generate the default :file:`records.config`. Just add the variable to "
"the file in an appropriate place with a proper default as this will now "
"override whatever default you put in the code for new installs."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:249
msgid ""
"To register a configuration variable callback, call "
"``RecRegisterConfigUpdateCb`` with the arguments:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:256
msgid ""
"A function with the signature ``<int (char const* name, RecDataT type, "
"RecData data, void* cookie)>``. The :arg:`name` value passed is the same as "
"the :arg:`name` passed to the registration function as is the :arg:`cookie` "
"argument. The :arg:`type` and :arg:`data` are the new value for the "
"variable. The return value is currently ignored. For future compatibility "
"return ``REC_ERR_OKAY``."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:266
msgid ""
"*callback* is called under lock so it should be quick and not block. If "
"that is necessary a :term:`continuation` should be scheduled to handle the "
"required action."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:281
msgid ""
"Variables used for HTTP processing should be declared as members of the "
"``HTTPConfigParams`` structure (but see :ref:`overridable-config-vars` for "
"further details) and use the specialized HTTP update mechanisms which "
"handle synchronization and initialization issues."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:286
msgid ""
"The configuration logic maintains two copies of the ``HTTPConfigParams`` "
"structure, the master copy and the current copy. The master copy is kept in "
"the ``m_master`` member of the ``HttpConfig`` singleton. The current copy "
"is kept in the ConfigProcessor. The goal is to provide a (somewhat) atomic "
"update for configuration variables which are loaded individually in to the "
"master copy as updates are received and then bulk copied to a new instance "
"which is then swapped in as the current copy. The HTTP state machine "
"interacts with this mechanism to avoid race conditions."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:295
msgid ""
"For each variable, a mapping between the variable name and the appropriate "
"member in the master copy should be established between in the "
"``HTTPConfig::startup`` method. The ``HttpEstablishStaticConfigXXX`` "
"functions should be used unless there is a strong, explicit reason to not "
"do so."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:300
msgid ""
"The ``HTTPConfig::reconfigure`` method handles the current copy of the HTTP "
"configuration variables. Logic should be added here to copy the value from "
"the master copy to the current copy. Generally this will be a simple "
"assignment. If there are dependencies between variables, those should be "
"checked and enforced in this method."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:316
msgid ""
"The variable is required to be accessible from the transaction API. In "
"addition to any custom API functions used to access the value, the "
"following items are required for generic access:"
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:311
msgid ""
"HTTP related variables that are changeable per transaction are stored in "
"the ``OverridableHttpConfigParams`` structure, an instance of which is the "
"``oride`` member of ``HTTPConfigParams`` and therefore the points in the "
"previous section still apply. The only difference for that is the further "
"``.oride`` member specifier in the structure references."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:320
msgid ""
"Add a value to the ``TSOverridableConfigKey`` enumeration in |apidefs.h.in|"
"_."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:333
msgid ""
"Update the Lua plugin enumeration ``TSLuaOverridableConfigKey`` in |"
"ts_lua_http_config.c|_."
msgstr ""

#: ../../arch/hacking/config-var-impl.en.rst:335
msgid ""
"Update the documentation of :ref:`ts-overridable-config` in |"
"TSHttpOverridableConfig.en.rst|_."
msgstr ""
